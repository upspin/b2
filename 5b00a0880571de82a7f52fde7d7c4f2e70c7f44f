{
  "comments": [
    {
      "key": {
        "uuid": "7ea90831_58ae7e7e",
        "filename": "cloud/storage/b2cs/b2cs.go",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-12-21T00:34:50Z",
      "side": 1,
      "message": "instead of adding a new dependency, how about we just use something like this:\n\nimport \"crypto/rand\"\n\nfunc randomToken() []byte {\n\tb :\u003d make([]byte, 16)\n\trand.Read(b)\n\treturn fmt.Sprintf(\"%x\", b)\n}\n\nThe chances of a collision are vanishingly small.",
      "revId": "5b00a0880571de82a7f52fde7d7c4f2e70c7f44f",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86d90405_5d3eebec",
        "filename": "cloud/storage/b2cs/b2cs.go",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-12-21T00:34:50Z",
      "side": 1,
      "message": "It\u0027s unfortunate that the b2 api\u0027s cursors are opaque, but I still think we can do better here. My reservation with this approach is that, theoretically, cursorMap could grow without bound (even though practically it won\u0027t).\n\nI suggest instead to use the upspin.io/cache.LRU type with some sensible maximum element size, say 100. Then you don\u0027t need to worry about removingÂ old cursors later and the get/set/delCursor methods go away.",
      "revId": "5b00a0880571de82a7f52fde7d7c4f2e70c7f44f",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5c6cb94_0aa394a4",
        "filename": "cloud/storage/b2cs/b2cs.go",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-12-21T00:34:50Z",
      "side": 1,
      "message": "call this err2, just to be sure that it doesn\u0027t clobber the outer error.",
      "range": {
        "startLine": 194,
        "startChar": 9,
        "endLine": 194,
        "endChar": 12
      },
      "revId": "5b00a0880571de82a7f52fde7d7c4f2e70c7f44f",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "607826f3_6597e3d5",
        "filename": "cloud/storage/b2cs/b2cs.go",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-12-21T00:34:50Z",
      "side": 1,
      "message": "this is redundant with the test on line 189, isn\u0027t it? I think it can be removed.",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 0
      },
      "revId": "5b00a0880571de82a7f52fde7d7c4f2e70c7f44f",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b35551c_9355d95e",
        "filename": "cloud/storage/b2cs/b2cs.go",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-12-21T00:34:50Z",
      "side": 1,
      "message": "I think this can be deleted entirely.",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 215,
        "endChar": 2
      },
      "revId": "5b00a0880571de82a7f52fde7d7c4f2e70c7f44f",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    }
  ]
}